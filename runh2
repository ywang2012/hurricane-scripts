#!/usr/bin/env python
## ---------------------------------------------------------------------------
## This software is in the public domain, furnished "as is", without technical
## support, and with no warranty, express or implied, as to its usefulness for
## any purpose.
## ---------------------------------------------------------------------------
##
## PURPOSE:
##
##   This is a python program that processes WRF 2D high frequency output
##   with ARPSPLT and transfer the generated images to CAPS web server
##
## HISTORY:
##   Yunheng Wang (09/15/2011)
##   Improved with option "-n" and convenience of changeing number of
##   processors.
##
## ---------------------------------------------------------------------
##
## REQUIREMENT:
##
########################################################################

import os, sys, getopt, re, time
import subprocess, threading

##======================================================================
## USAGE
##======================================================================
def usage( istatus = 0 ) :
  '''-------------------------------------------------------------------
  Print Usage and then exit
  -------------------------------------------------------------------'''
  print >> sys.stderr, '''
    Usage: %s [option] YYYYMMDDCASEhhZ [VAR]\n
    \tDATE\t Date to be processed, for example 20100915
    \tTime\t Time to be processed, for example, 00Z or 12Z
    \tCASE\t Case to be processed. Valid are 'gfs' or 'ekf'
    \tVAR\t Name of the variable to be unpack or transfer.
    \t\t Valid variables are 'comref', 'maxspd', and 'maxsfc'
    OPTIONs:\n
    \tOption \t\tDefault \tInstruction
    \t-------\t\t--------\t-----------
    \t-d, --verbose\tNone\t\tVerbose
    \t-h, --help         \t\tPrint this help
    \t-n, --norun\t              \tPrepare job scripts, but do not actually submit them
    \t-q, --queue\tcaps_forecast \tqueue name for the jobs
    \t-r, --rename\tNone       \tRun rename and transfer only
    \t-u, --unpack\tNone       \tRun unpack only
    \t-s, --start\t0           \tStarting forecast hour
    \t-e, --end\t72            \tEnd forecast hour
    \t-i, --interval\t300      \tinterval seconds
    \t-c, --case\tgfs          \tRun GFS or EnKF cases, the date and time is
    \t\t\t                determined automatically by current date and time
    ''' % cmd
  sys.exit(istatus)
#enddef

##======================================================================
## Parse command line arguments
##======================================================================
def parseArgv(argv) :
  '''-------------------------------------------------------------------
  Parse command line arguments
  -------------------------------------------------------------------'''
  global _debug, run_mode, queuename

  run_mode = 0

  starth = 0
  endh   = 72
  ints   = 300

  casein ='gfs'

  try:
    opts, args = getopt.getopt(argv,'hvurq:dns:e:i:c:',           \
           ['help','verbose','unpack','rename','queue','norun','start','end','interval','case'])

    for opt, arg in opts :
      if opt in ('-h','--help'):
        usage(0)
      elif opt in ( '-v','-d', '--verbose'):
        _debug = 1
      elif opt in ( '-u', '--unpack'):
        run_mode = 2
      elif opt in ( '-r', '--rename'):
        run_mode = 3
      elif opt in ( '-n', '--norun') :
        run_mode = -1
      elif opt in ( '-q', '--queue') :
        queuename = arg
      elif opt in ( '-s', '--start') :
        starth = int(arg)
      elif opt in ( '-e', '--end') :
        endh   = int(arg)
      elif opt in ( '-i', '--interval') :
        ints   = int(arg)
      elif opt in ( '-c', '--case') :
        if re.match('(gfs|ekf)',arg) :
          casein = arg
        else :
          print >> sys.stderr, 'ERROR: Unknown arg "-c %s".' % arg
          usage(3)


  except getopt.GetoptError:
    print >> sys.stderr, 'ERROR: Unknown option.'
    usage(2)

  if ( len(args) >= 1 ) :
    oneargs = re.match('(\d{4}\d{2}\d{2})(gfs|ekf)(00Z|12Z)',args[0])
    if oneargs:
      (date,case,ztime) = oneargs.group(1,2,3)
      if (len(args) == 1) :
        argvs = [date,case,ztime,['comref','maxspd','maxsfc']]
      elif (len(args) >= 2) :
        argvs = [date,case,ztime,args[1:]]
    else :
      print >> sys.stderr, 'Argument %s is in wrong format.' % (args[0])
      usage(1)
  else :
    (curryear,currmon,currday,currh,currm,currs,currw,curry,curri) = time.localtime()
    date = '%4d%02d%02d'%(curryear,currmon,currday)
    if currh > 18 :
      ztime = "12Z"
    else :
      ztime = "00Z"
    argvs = [ date, casein, ztime, ['comref','maxspd','maxsfc'] ]
    ##print >> sys.stderr, 'ERROR: wrong number of command line arguments.'
    ##usage(1)

  argvs.extend( (starth,endh,ints) )

  return argvs
#enddef

##======================================================================
## MAIN program here
##======================================================================
def main(runCase,datein,casein,timein,fieldin,bgnh,endh,ints) :
  global _debug, runmode, outfile
  global workdir, datadir

  '''-------------------------------------------------------------------
  Main work should be done here
  -------------------------------------------------------------------'''

  dateRe = re.compile('(\d{4})(\d{2})(\d{2})')
  caseRe = re.compile('(gfs|ekf)')
  timeRe = re.compile('(\d{2})Z')

  lindx = { 'bgns' : bgnh*3600, 'ends' :endh*3600, 'ints' :ints }

  '''-------------------------------------------------------------------
  Make sure passing in parameters are right and make directories as necessary
  -------------------------------------------------------------------'''
  if not dateRe.match(datein) :
    print >> sys.stderr, 'datein = %s is not in right format.\n' % (datein)
    usage()

  if not caseRe.match(casein) :
    print >> sys.stderr, 'casein = %s is not in right format.\n' % (casein)
    usage()

  if not timeRe.match(timein) :
    print >> sys.stderr, 'timein = %s is not in right format.\n' % (timein)
    usage()

  dateDir = workdir + '/'+datein
  if not os.path.lexists(dateDir):
    os.mkdir(dateDir)

  caseDir = dateDir + '/' + casein + timein
  if not os.path.lexists(caseDir) :
    os.mkdir(caseDir)

  '''-------------------------------------------------------------------
  Copy or link data files
  --------------------------------------------------------------------'''
  os.chdir(caseDir)

  if not os.path.lexists('data2d') :
    os.mkdir('data2d')

  ##print >> outfile, '--- 1 ---'

  srcC = runCase.getRunname()
  srcDir = datadir+'/wrf-%s/%s/%s00Z/' % (srcC[casein],datein,timein[0:2])
  print >> outfile, 'Linking data from %s to %s ...' % (srcDir,caseDir)

  proc_in = runCase.getProcessors()
  ##if run_mode > -1 :
  ##  link_data(srcDir,datein+timein[0:2], caseDir,
  ##            lindx,proc_in['nprocx_in'],proc_in['nprocy_in'] )

  '''-------------------------------------------------------------------
  Process each forecast hour
  -------------------------------------------------------------------'''
  timestr = '%s%s0000' % (datein,timein[0:2])
  initime = time.strptime(timestr, '%Y%m%d%H%M%S')
  initsec = time.mktime(initime)

  maxwaitsec = 9*3600

  ## process initial time 0

  if bgnh == 0 :
    ##endtime = time.localtime(initsec)  ## actually it should be UTC time
    endtstr = time.strftime('%Y-%m-%d_%H:%M:%S',initime)

    fready = os.path.join(srcDir,'wrfdata','wrfout_d01_%s_ready'%endtstr)

    if _debug : print >> outfile, 'Waiting for %s at %s ... ' % (fready,time.strftime('%Y-%m-%d_%H:%M:%S'))

    ## wait for the read file
    waitime = 0
    while waitime < maxwaitsec :  ## wait at most 5 hours
      if os.path.lexists(fready) :
        break
      else :
        time.sleep(10)
        waitime += 10

    if (waitime < maxwaitsec) :
      print >> outfile, 'Found %s at %s ... ' % (fready,time.strftime('%Y-%m-%d_%H:%M:%S'))

      if run_mode > -1 :
        link_data(srcDir,datein+timein[0:2], caseDir,
                  lindx,proc_in['nprocx_in'],proc_in['nprocy_in'] )

      pindx = ( 0,0,ints )  ## process loop indices

      '''-----------------------------------------------------------------
      Process each field in order
      -----------------------------------------------------------------'''
      ##print >> outfile, '--- 2 ---'

      thfields = []
      for field in fieldin:
        print >> outfile, 'Processing %s at forecast hour %02d for %s%s%sZ ...' %(field,0,datein,casein,timein)
        thfield = field_processor(0,runCase,workdir,datein,timein,casein,field,pindx)
        thfield.start()
        thfields.append(thfield)

      for th in thfields :
        th.join()

    else :
      print >> outfile, 'File %s not found, program skip forecast at %02d on %s ... ' % (
                              fready,fhour,time.strftime('%Y-%m-%d_%H:%M:%S'))

    outfile.flush()

  ## process forecast hours

  for hour in range(bgnh,endh) :
    fhour = hour + 1

    fsecond = initsec + fhour*3600
    endtime = time.localtime(fsecond)  ## actually it should be UTC time
    endtstr = time.strftime('%Y-%m-%d_%H:%M:%S',endtime)

    fready = os.path.join(srcDir,'wrfdata','wrfout_d01_%s_ready'%endtstr)

    if _debug : print >> outfile, 'Waiting for %s at %s ... ' % (fready,time.strftime('%Y-%m-%d_%H:%M:%S'))

    ## wait for the ready file
    waitime = 0
    while waitime < maxwaitsec :  ## wait at most 5 hours
      if os.path.lexists(fready) :
        break
      else :
        time.sleep(10)
        waitime += 10

    if (waitime < maxwaitsec) :
      print >> outfile, 'Found %s at %s ... ' % (fready,time.strftime('%Y-%m-%d_%H:%M:%S'))

      pindx = ( (fhour-1)*3600+ints,fhour*3600,ints )  ## process loop indices

      '''-----------------------------------------------------------------
      Process each field in order
      -----------------------------------------------------------------'''
      ##print >> outfile, '--- 2 ---'

      thfields = []
      for field in fieldin:
        print >> outfile, 'Processing %s at forecast hour %02d for %s%s%sZ ...' %(field,fhour,datein,casein,timein)
        thfield = field_processor(fhour,runCase,workdir,datein,timein,casein,field,pindx)
        thfield.start()
        thfields.append(thfield)

      for th in thfields :
        th.join()

    else :
      print >> outfile, 'File %s not found, program skip forecast at %02d on %s ... ' % (
                              fready,fhour,time.strftime('%Y-%m-%d_%H:%M:%S'))

    outfile.flush()

  '''-------------------------------------------------------------------
  Wait for all threads to end
  -------------------------------------------------------------------'''

  while threading.activeCount() > 1:
    if _debug :
      print "active threads : %d" % threading.activeCount()
      for th in threading.enumerate() :
        print >> outfile, 'Thread %s is still alive.' % th.name
    ##print threading.currentThread()
    time.sleep(10)

#enddef


##======================================================================

def link_data(srcdir, casename, destdir, lindx, nprocx_in, nprocy_in) :
  '''
  PURPOSE: link data from srcdir to destdir and prepare with 2D arbitrary files
  '''

  ##os.chdir(destdir)

  ## Link grid and base file
  for i in range(nprocx_in) :
    for j in range(nprocy_in) :
      grdbasf = 'ar%s.hdfgrdbas_%03d%03d'%(casename,i+1,j+1)
      fsrc = os.path.join(srcdir,'arpsdata',grdbasf)
      fdes = os.path.join(destdir,grdbasf)
      if not os.path.lexists(fdes) :
        if _debug : print >> outfile, 'Linking %s to %s ...' % (fsrc,fdes)
        os.symlink(fsrc,fdes)

  ##os.chdir(destdir+'/data2d')

  desnames = ('comref','usfc__','vsfc__','mslp__','maxspd','maxsfc')

  ## link the initial files
  if lindx['bgns'] == 0 :
    desec = 0
    comref = 'ar%s.netcomref%06d' % (casename,desec)
    fsrc = os.path.join(srcdir,'data2d',comref)

    for name2d in desnames :
      fdes = os.path.join(destdir,'data2d','ar%s.net%s%06d' % (casename,name2d,desec))
      if not os.path.lexists(fdes) :
        if _debug : print >> outfile, 'Linking %s to %s ...' % (fsrc,fdes)
        os.symlink(fsrc,fdes)

  ## link files in the forecast range
  for sec in range(lindx['bgns'],lindx['ends'],lindx['ints']) :
    desec = sec+lindx['ints']
    comref = 'ar%s.netcomref%06d' % (casename,desec)
    fsrc = os.path.join(srcdir,'data2d',comref)

    for name2d in desnames :
      fdes = os.path.join(destdir,'data2d','ar%s.net%s%06d' % (casename,name2d,desec))
      if not os.path.lexists(fdes) :
        if _debug : print >> outfile, 'Linking %s to %s ...' % (fsrc,fdes)
        os.symlink(fsrc,fdes)

#enddef

##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##
## CLASS field_proccessor
##
## Contains:
##   run
##
##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class field_processor(threading.Thread) :
  ## Override Thread's __init__ method to accept the parameters needed:
  def __init__(self,fhour,runCase,workdir,datestr,timestr,casestr,fieldstr,pindx) :

    self.date  = datestr
    self.time  = timestr[0:2]
    self.case  = casestr
    self.field = fieldstr

    self.casename = casestr+timestr
    self.casedir  = os.path.join(workdir,datestr, self.casename)

    self.workdir  = workdir

    self.caseNames = runCase.getCasename()
    self.bgnTimes = pindx
    self.fhour = fhour

    ##self.runCase = runCase
    self.procs = runCase.getProcessors()
    self.castr = runCase.getCaptionString(self.case)
    self.fostr = runCase.getFooterString(self.case)
    self.dname = runCase.getDestname()

    self.pltexe = '/home/ywang/hurricane_scripts/arpspltncar_mpi'

    threading.Thread.__init__(self)

    self.name = '%s_%02d' % ( self.field,self.fhour )

  #enddef

  def run (self) :

    global _debug, run_mode, queuename, outfile

    ##
    ## Set number of processors
    ##
    nxproc = self.procs['nproc_x']
    nyproc = self.procs['nproc_y']
    nnodes = 2
    ntotal = nxproc*nyproc
    (npnode, nmod) = divmod(ntotal,nnodes)
    if nmod > 0 : npnode += 1

    if run_mode < 1 :
      '''-------------------------------------------------------------------
      Prepare namelist file for plotting
      --------------------------------------------------------------------'''

      fnmlist = os.path.join(self.casedir,'%s%02d.pltin' % (self.field,self.fhour) )

      cmdline = "sed -e 's/YYYYMMDDTT/%s/' -e 's/TBGN/%d/' -e 's/TEND/%d/' " \
                  "-e 's/OUTNAME/%s%02d/' -e 's/TITLESTR/%s/' -e 's/FOOTERSTR/%s/' "    \
                  "-e '/nproc_x=/s/NPROCX/%d/' -e '/nproc_y=/s/NPROCY/%d/' "    \
                  "-e '/max_fopen=/s/MAXFOPEN/%d/' "    \
                  "-e '/nprocx_in=/s/NPROCXIN/%d/' -e '/nprocy_in=/s/NPROCYIN/%d/' "    \
                  "%s/scripts/%s.pltin > %s  " % (
                  self.date+self.time,self.bgnTimes[0],self.bgnTimes[1],
                  self.field,self.fhour,self.castr,self.fostr,
                  nxproc,nyproc,ntotal,self.procs['nprocx_in'],self.procs['nprocy_in'],
                  self.workdir,self.field,fnmlist)

      subprocess.Popen(cmdline,shell=True).wait()
      if _debug : print >> outfile, 'Namelist %s is generated.' % ( fnmlist )

      '''-------------------------------------------------------------------
      Prepare batch script for plotting
      --------------------------------------------------------------------'''

      plotbsub = 'plt_%s_%02d.bsub'%(self.field,self.fhour)
      jobname  = 'P%s%s%sZ%s%02d' %(self.date[6:8],self.casename[0],self.casename[3:5],self.field[4],self.fhour)

      print >> outfile, 'Generating batch file %s ...' % (plotbsub)

      batchFile = open(plotbsub,'w')
      batchFile.write('''#!/bin/sh
#BSUB -q %(queue)s
#BSUB -a openmpi
#BSUB -n %(procs)d
#BSUB -x
#BSUB -R span[ptile=%(ptile)d]
#BSUB -W 01:30
#BSUB -o plt_%(casename)s_%(field)s%(f)02d_%%J.out
#BSUB -e plt_%(casename)s_%(field)s%(f)02d_%%J.err
#BSUB -J "%(jobname)s"
#

export MPI_COMPILER=intel
export MPI_HARDWARD=ib
export MPI_SOFTWARE=openmpi

#

# Change to the directory that you want to run in.
#
cd %(wrkdir)s
#
# Make sure you're in the correct directory.
#
pwd
#
# Run the job, redirecting input from the given file.  The date commands
# and the time command help track runtime and performance.
#
date

mpirun.lsf %(exe)s < %(nmlinput)s

date
\n'''%{'queue' : queuename, 'procs' : ntotal, 'ptile' : npnode,
       'casename' : self.casename, 'field' : self.field, 'f' : self.fhour,
       'jobname' : jobname,
       'wrkdir' : os.path.join(self.workdir,self.date,self.casename),
       'exe'    : self.pltexe, 'nmlinput' : fnmlist
       }
      )

      batchFile.close()

      if _debug : print >> outfile, 'Batch script %s is generated.' % plotbsub

      '''-------------------------------------------------------------------
      Submit the plotting job
      --------------------------------------------------------------------'''
      starttime = time.time()
      cmdline = "%s -K < %s/%s" % (bsubcmd,self.casedir,plotbsub)
      if run_mode > -1 :
        subprocess.Popen(cmdline,shell=True,stderr=outfile,stdout=outfile).wait()
      print >> outfile, 'Plot %s for forecast %02d used %f seconds(includes waiting time).\n' % (self.field,self.fhour,time.time()-starttime)
      outfile.flush()

    '''-------------------------------------------------------------------
    Convert and transfer separately for normal size and big images
    --------------------------------------------------------------------'''
    print >> outfile, '--- 3-%s ---' % self.field

    print >> outfile, 'Image processing for %s ...' % (self.field)
    imgT1 = imgConverter(self.workdir,self.date,self.casename,self.field,       self.fhour,self.dname)
    imgT1.start()

    print >> outfile, 'Image processing for %s ...' % (self.field+'_big')
    imgT2 = imgConverter(self.workdir,self.date,self.casename,self.field+'_big',self.fhour,self.dname)
    imgT2.start()

    outfile.flush()

    imgT1.join()
    imgT2.join()

  #enddef
#endclass

##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##
## CLASS imgConverter
##
## Contains:
##   run
##   image_rename
##
##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class imgConverter(threading.Thread):

  ## Override Thread's __init__ method to accept the parameters needed:
  def __init__(self,workdir,datestr,casestr,namestr,fhour,downname) :

    self.workdir = workdir
    self.casedir = os.path.join(workdir, datestr, casestr)
    self.date = datestr
    self.case = casestr
    self.fhour = fhour
    self.fieldname = namestr         ## real name
    self.downdir  = downname

    if namestr[-4:] == '_big' :
      self.width  = 1500
      self.height = 1500
      self.field  = namestr[:-4]    ## Field only
      self.getscript = 'getdata_big'
      self.big = 'B'
    else :
      self.width  = 1000
      self.height = 1000
      self.field  = namestr
      self.getscript = 'getdata'
      self.big = 'N'

    self.time = casestr[3:5]
    if fhour > 0 :
      self.bgnSeq = (fhour-1)*3600/300+1
    else :
      self.bgnSeq = 0

    threading.Thread.__init__(self)
    self.name = 'unpack_%s_%02d' % (namestr,fhour)

  #enddef

  def run (self) :

    global _debug, run_mode, queuename

    os.chdir(self.casedir)

    if run_mode < 3 :
      '''-------------------------------------------------------------------
      Prepare batch scripts
      --------------------------------------------------------------------'''

      wrkdir = os.path.join(self.workdir,self.date,self.case,self.fieldname)
      if not os.path.lexists(wrkdir) :
        os.mkdir(wrkdir)

      unpackbsub = '%s.bsub'%self.name
      jobname    = 'U%s%s%s%s%s%02d'%(self.date[6:8],self.case[0],self.time,self.big,self.fieldname[4],self.fhour)

      print >> outfile, 'Generating bsub file %s ...' % unpackbsub

      fileBatch = open(unpackbsub,'w')

      fileBatch.write('''#!/bin/sh
#BSUB -q %(queue)s
#BSUB -n 1
#BSUB -x
#BSUB -R span[ptile=1]
#BSUB -W 01:00
#BSUB -o unpack_%(name)s_%(f)02d_%%J.out
#BSUB -e unpack_%(name)s_%(f)02d_%%J.err
#BSUB -J "%(jobname)s"
#

#

# Change to the directory that you want to run in.
#
wrkdir=%(wrkdir)s
cd $wrkdir
#
# Make sure you're in the correct directory.
#
pwd

ln -s ../%(field)s%(f)02d.gmeta .
#
# Run the job, redirecting input from the given file.  The date commands
# and the time command help track runtime and performance.
#
date

/home/ywang/bin/gmeta2png -r %(x)dx%(y)d %(field)s%(f)02d.gmeta

date

rm %(field)s%(f)02d.gmeta

\n''' %{'queue' : queuename, 'name' : self.fieldname, 'f' : self.fhour,
            'jobname' : jobname,
            'wrkdir' : wrkdir, 'x' : self.width, 'y' : self.height,
            'field' : self.field
       }
      )

      fileBatch.close()

      '''-------------------------------------------------------------------
      Submit the jobs
      --------------------------------------------------------------------'''

      starttime = time.time()
      print >> outfile, 'Submitting jobs %s ...' % unpackbsub
      cmdline = "%s -K < %s/%s" % (bsubcmd,self.casedir,unpackbsub)
      if run_mode > -1 :
        subprocess.Popen(cmdline,shell=True,stderr=outfile,stdout=outfile).wait()
      ##outfile.flush()
      print >> outfile, 'Unpack %s used (includes waiting time) %f seconds.\n' % (self.fieldname,time.time()-starttime)
      ##outfile.flush()

    '''-------------------------------------------------------------------
    Waiting converting to be finished and then transfer it to downdraft
    --------------------------------------------------------------------'''
    print >> outfile, '--- 4-%s --- ' % self.fieldname
    print >> outfile, 'Rename the converted image files for %s ...' % self.fieldname
    if _debug : print 'Renaming %s ...'% self.fieldname
    if run_mode > -1 :  self.image_rename()

    '''-------------------------------------------------------------------
    Transfer them to downdraft
    --------------------------------------------------------------------'''

    seqbgn = self.bgnSeq+1
    if self.fhour > 0 :
      seqend = self.bgnSeq + 12
    else :
      seqend = seqbgn

    print >> outfile, '--- 5-%s --- ' % self.fieldname
    print >> outfile, 'Transfering %s to CAPS webserver ...' % (self.fieldname)
    cmdline = "ssh downdraft.caps.ou.edu /import/animdata_2d/%s/checkdir %s %s %s" % (
              self.downdir,self.date,self.case,self.field)
    if _debug : print >>outfile, 'Executing %s ...'%cmdline
    if run_mode > -1 :
      subprocess.Popen(cmdline,shell=True,stdin=open(os.devnull, 'rb'),
                       stderr=outfile,stdout=outfile).wait()

      files = []
      for seq in range(seqbgn,seqend+1) :
        fname = '%s%03d.png' % (self.field,seq)
        fsrc = os.path.join(self.fieldname,fname)
        files.append(fsrc)

      fsrcstr = ' '.join(files)
      ddes = os.path.join("/import/animdata_2d",self.downdir,self.date,self.case,self.fieldname)
      cmdline = "scp %s downdraft.caps.ou.edu:%s" % (fsrcstr,ddes)
      if _debug : print >>outfile, 'Executing %s ...'%cmdline
      subprocess.Popen(cmdline,shell=True,stdin=open(os.devnull, 'rb'),
                       stderr=outfile,stdout=outfile).wait()

      cmdline = "ssh downdraft.caps.ou.edu /import/animdata_2d/%s/link2d %s %s %s %s %s" % (
                self.downdir,self.date,self.case,self.field,self.big,fsrcstr)
      if _debug : print >>outfile, 'Executing %s ...'%cmdline
      subprocess.Popen(cmdline,shell=True,stdin=open(os.devnull, 'rb'),
                       stderr=outfile,stdout=outfile).wait()
  #enddef

  def image_rename(self) :
    '''
    PURPOSE: rename images to following a sequence based on passing in list starts
    '''

    global _debug

    fielddir = os.path.join(self.casedir,self.fieldname)
    fileRe = re.compile('%s%02d.gmeta(\d{3}).png'% (self.field,self.fhour))

    ##seqbgn = self.bgnSeq+1
    ##seqend = seqbgn

    ##os.chdir(self.casedir)               ## it is process-global, not thread-safe
    files = os.listdir(self.fieldname)
    for gfile in files :
      fileMatch = fileRe.match(gfile)
      if fileMatch:
        order = int(fileMatch.group(1))
        seq = self.bgnSeq+order
        newfile = '%s%03d.png' % (self.field,seq)
        if _debug :
          print >> outfile, 'Renaming %s/%s to %s ' % (fielddir,gfile, newfile)
        os.rename(os.path.join(self.fieldname,gfile),os.path.join(self.fieldname,newfile))
        ##print "==aaa==aaa==aaa== ",seqend,seq
        ##seqend = max(seq,seqend)

    ##print "==abc==abc==abc== ",seqbgn,seqend
    ##return (seqbgn,seqend)

  #enddef

#endclass

##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##
## class case
##
## hurricane1 hurricane over Atlantic ocean with 2010/2011 domain
## hurricane2 hurricane over Atlantic ocean with over 2012 domain
## typhoon1   typhoon over Pacific ocean with 2010 domain
##
##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class caseConfiguration(object):
  '''Run case Configuration'''

  def __init__(self,casein):
    if casein not in ('hurricane1','hurricane2','typhoon1') :
      raise runException('ERROR: unsupported case id: '+casein)

    self.caseid = casein
  #enddef

  def getProcessors(self) :
    ''' return dict (nproc_x,nproc_y,max_fopen,nprocx_in,nprocy_in) '''

    processors = {
      'hurricane1': { 'nproc_x': 3, 'nproc_y': 9, 'max_fopen': 27, 'nprocx_in':  9, 'nprocy_in': 36 },
      'hurricane2': { 'nproc_x': 4, 'nproc_y': 8, 'max_fopen': 48, 'nprocx_in':  4, 'nprocy_in': 8 },
      'typhoon1'  : { 'nproc_x': 4, 'nproc_y': 9, 'max_fopen': 36, 'nprocx_in': 12, 'nprocy_in': 27 }
    }

    return processors[self.caseid]
  #enddef

  def getFrames(self) :
    ''' return tuple (number_patch, number_frame) '''

    frames = {
      'hurricane1': (12,577),  ## 48 hours forecast (172800 seconds) at 300 second interval
      'hurricane2': (24,865),  ## 72 hours forecast (259200 seconds) at 300 second interval
      'typhoon1'  : (18,577)
    }

    return frames[self.caseid]
  #enddef

  def getCasename(self) :
    ''' return case name dictionary '''

    casenames = {
      'hurricane1': {'gfs':'GFS',  'ekf' : 'EnKF'},
      'hurricane2': {'gfs':'GSIA', 'ekf' : 'EnKFA'},
      'typhoon1'  : {'gfs':'GFS',  'ekf' : 'EnKF'}
    }

    return casenames[self.caseid]
  #enddef

  def getCaptionString(self,case) :
    ''' return caption string '''

    casestr = self.getCasename()[case]

    captions = {
      'hurricane1': casestr+''' IC\/LBC (1800x900x50, dx=4 km)''',
      'hurricane2': casestr+''' IC\/LBC (2000x1200x50, dx=4 km)''',
      'typhoon1'  : casestr+''' IC\/LBC (1500x1080x50, dx=4 km)'''
    }

    return captions[self.caseid]
  #enddef

  def getFooterString(self,case) :
    ''' return footer string '''

    casestr = self.getCasename()[case]

    captions = {
      'hurricane1': casestr+', 1800x900x50, dx=4 km)',
      'hurricane2': casestr+', 2000x1200x50, dx=4 km)',
      'typhoon1'  : casestr+', 1500x1080x50, dx=4 km)'
    }

    return captions[self.caseid]
  #enddef

  def getRunname(self) :
    ''' return run name dict '''

    runnames = {
      'hurricane1': {'gfs':'atl_hurr_gfs',        'ekf' : 'atl_hurr_enkf'},
      'hurricane2': {'gfs':'GSIA',                'ekf' : 'EnKFA'},
      ##'hurricane2': {'gfs':'atl_hurr_gfs2012',    'ekf' : 'atl_hurr_enkf2012'},
      'typhoon1'  : {'gfs':'hurr3',               'ekf' : 'hurr4'}
    }

    return runnames[self.caseid]
  #enddef


  def getDestname(self) :
    ''' return name string on downdraft '''

    destnames = {
      'hurricane1': 'hurricane',
      'hurricane2': 'hurricane2',
      'typhoon1'  : 'typhoon'
    }

    return destnames[self.caseid]
  #enddef

#endclass

##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
##
## Genearl classes
##
##%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

class runException(Exception):

  '''Run-time exception'''
  def __init__(self,message_in):
    Exception.__init__(self)
    self.message = message_in
  #enddef

#endclass

########################################################################
## Entance Point
########################################################################

if (__name__ == '__main__') :
##-----------------------------------------------------------------------
## Defined global variables
##
## cmd
## args
## _debug
##
##-----------------------------------------------------------------------
  _debug = 0
  run_mode = 0                                 ## < 0 : norun
                                               ## = 0 : normal
                                               ## = 2 : unpack only
                                               ## = 3 : rename only
  queuename = 'caps_forecast'

  cmdin = sys.argv[0]
  (cmdpath,cmd) = os.path.split(cmdin)

  args  = parseArgv(sys.argv[1:])

  if cmd == 'runh1' :
    runCase = caseConfiguration('hurricane1')
  elif cmd == 'runh2' :
    runCase = caseConfiguration('hurricane2')
  elif cmd == 'runt1' :
    runCase = caseConfiguration('typhoon1')
  else :
    runCase = caseConfiguration('hurricane2')
    print "\nAssume hurricane over Atlantic with 2012 domain.\n"
  args.insert(0,runCase)

  workdir = '/scratch/ywang/hurr2'
  datadir = '/mnt/work/arpsdata/arpsfcst'
  ##bsubcmd = '/lsf/7.0/linux2.6-glibc2.3-x86_64/bin/bsub'
  bsubcmd = 'bsub'

  if run_mode < 0 or _debug > 0:
    outfile = sys.stdout
  else :
    fseq = 0
    stdfile = os.path.join(workdir,"%s%s%s_%02d.out"%(args[1],args[2],args[3],fseq))
    while os.path.lexists(stdfile) :
      fseq += 1
      stdfile = os.path.join(workdir,"%s%s%s_%02d.out"%(args[1],args[2],args[3],fseq))
    outfile = open(stdfile,"w")

  try:
    starttime = time.time()
    main(*args)
    print >>outfile, "\nTotal elapsed time is %f seconds.\n" % (time.time()-starttime)

  except runException, ex:
    outfile.write(ex.message+'\nSystem aborting ...\n')

  ##finally:
  ##outfile.close()
